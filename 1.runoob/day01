
1.EPRL：命令交互模式        命令行，node   即可进入

2.全局安装和本地安装的区别，看博客园，你有收藏过的哦! 

3.Node.js 异步编程的直接体现就是回调。     异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。

4.减少阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。  web性能的瓶颈：IO  

5.var data = fs.readFileSync('input.txt'); console.log(data);   console.log(data.toString());
  不执行toString（）   打印出来的结果是Buffer哦。
  
6.回调，封装好的！   node内部通过事件来唤醒的，钩子！ 
 不能让CPU等待IO，让CPU先执行其他的，当前的IO结束后进入待执行队列。  哦哦哦，so easy的事情
  阻塞  非阻塞：阻塞的是CPU，让CPU一直等。

7.事件循环机制： 设计模式中观察者模式                EventEmitter 的核心就是事件触发与事件监听器功能的封装。
  事件：主题    
  函数：观察者
  每一个异步事件都有一个事件观察者？　　１对１关系？　　　可不可以１对多呢？   可以的！  一个事件可以有多个时间监听器！　
  
  事件队列：Node.js 所有的异步 I/O 操作在完成时都会产生并发送一个事件对象到事件队列。 所有这些产生事件对象都是 events.EventEmitter 的实例。
  
8.Buffer
  字符串数据类型   二进制数据类型
  在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。
  IO操作：网络IO和磁盘IO都是以二进制的形式来的吗？　　　　又该看阮一峰的那个网络协议了！
  buffer数据类型--》json
  
9.Node的流（Stream）：很多对象实现了流    而流本身自带了内置事件，我们为其绑定处理函数即可。
  所有的 Stream 对象都是 EventEmitter 的实例
  
  管道流：从流中读取数据      实现流的贯通      中间环节：对数据的压缩 解压 
  
10.模块系统 

11.函数作为参数

12.
  
 
     

